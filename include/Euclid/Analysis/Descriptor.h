/** Shape descriptors.
 *
 *  This package contain functions to compute shape descriptors.
 *  @defgroup PkgDescriptor Descriptor
 *  @ingroup PkgAnalysis
 */
#pragma once

#include <vector>
#include <CGAL/boost/graph/properties.h>

namespace Euclid
{
/** @{*/

/** The spin image descriptor.
 *
 *  Spin image is an image-based local shape descriptor. For every point
 *  on a mesh, an image is generated by projecting points onto the image
 *  plane within a local support.
 *
 *  **Reference**
 *
 *  Johnson A E, Hebert M.
 *  Using spin images for efficient object recognition in cluttered 3D
 * 	scenes[J].
 *  IEEE Transactions on pattern analysis and machine intelligence,
 *  1999, 21(5): 433-449.
 */

template<typename Mesh>
class SpinImage
{
public:
    using VPMap =
        typename boost::property_map<Mesh, boost::vertex_point_t>::type;
    using Point_3 = typename boost::property_traits<VPMap>::value_type;
    using Kernel = typename CGAL::Kernel_traits<Point_3>::Kernel;
    using Vector_3 = typename Kernel::Vector_3;
    using FT = typename Kernel::FT;
    using Vertex = typename boost::graph_traits<Mesh>::vertex_descriptor;

public:
    /** Constructor.
     *
     *  Initialize some structures needed to compute a spin image.
     *
     *  @param mesh The input mesh.
     *  @param resolution The resolution of the mesh, default to zero and let
     *  the construtor estimate this value based on average edge length.
     *  @param vnormals Vertex normals of the mesh, default to nullptr and let
     *  the constructor compute the values.
     */
    explicit SpinImage(const Mesh& mesh,
                       FT resolution = 0.0,
                       const std::vector<Vector_3>* vnormals = nullptr);

    /** Destructor. */
    ~SpinImage();

    /** Compute the spin image descriptor for a vertex.
     *
     *  @param v The vertex descriptor.
     *  @param spin_img The output spin image for v.
     *  @param bin_size Multiples of the mesh resolution.
     *  @param image_width Number of rows and colums for the image.
     *  @param support_angle Maximum support angle in degrees.
     */
    template<typename T>
    void compute(const Vertex& v,
                 std::vector<T>& spin_img,
                 float bin_size = 1.0f,
                 int image_width = 15,
                 float support_angle = 60.0f);

private:
    const Mesh* _mesh;
    const std::vector<Vector_3>* _vnormals;
    FT _resolution;
    bool _is_shared;
};

/** @}*/
} // namespace Euclid

#include "src/SpinImage.cpp"
