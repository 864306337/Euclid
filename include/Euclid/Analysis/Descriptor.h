/** Shape descriptors.
 *
 *  This package contain functions to compute shape descriptors.
 *  @defgroup PkgDescriptor Descriptor
 *  @ingroup PkgAnalysis
 */
#pragma once

#include <vector>
#include <CGAL/boost/graph/properties.h>
#include <Eigen/Core>
#include <Euclid/Util/Memory.h>

namespace Euclid
{
/** @{*/

/** The spin image descriptor.
 *
 *  Spin image is an image-based local shape descriptor. For every point
 *  on a mesh, an image is generated by projecting points onto the image
 *  plane within a local support.
 *
 *  **Reference**
 *
 *  Johnson A E, Hebert M.
 *  Using spin images for efficient object recognition in cluttered 3D
 * 	scenes[J].
 *  IEEE Transactions on pattern analysis and machine intelligence,
 *  1999, 21(5): 433-449.
 */
template<typename Mesh>
class SpinImage
{
public:
    using VPMap =
        typename boost::property_map<Mesh, boost::vertex_point_t>::type;
    using Point_3 = typename boost::property_traits<VPMap>::value_type;
    using Kernel = typename CGAL::Kernel_traits<Point_3>::Kernel;
    using Vector_3 = typename Kernel::Vector_3;
    using FT = typename Kernel::FT;
    using Vertex = typename boost::graph_traits<Mesh>::vertex_descriptor;

public:
    /** Build up the necessary computational components.
     *
     *  @param mesh The target mesh.
     *  @param vnormals The precomputed vertex normals, default to nullptr and
     *  it'll be computed internally.
     *  @param resolution The mesh resolution, i.e. avg. edge length. Default to
     *  0.0 and it'll be computed internally.
     */
    void build(const Mesh& mesh,
               const std::vector<Vector_3>* vnormals = nullptr,
               FT resolution = 0.0);

    /** Compute the spin image descriptor for all vertices.
     *
     *  @param spin_img The output spin image for v.
     *  @param bin_scale Multiple of the mesh resolution, default to 1.0 which
     *  is equavalent to use the mesh resolution as bin size.
     *  @param image_width Number of rows and columns for the image, default to
     *  16. bin_size * image_width equals to the actual image size in mesh
     *  coordinates.
     *  @param support_angle Maximum support angle in degrees, default to 90.0
     *  thus supporting vertices pointing in the same direction as v.
     */
    template<typename Derived>
    void compute(Eigen::ArrayBase<Derived>& spin_img,
                 float bin_scale = 1.0f,
                 int image_width = 16,
                 float support_angle = 90.0f);

public:
    /** The mesh being processed.
     *
     */
    const Mesh* mesh = nullptr;

    /** The vertex normals.
     *
     */
    ProPtr<const std::vector<Vector_3>> vnormals = nullptr;

    /** The mesh resolution.
     *
     */
    FT resolution = 0.0;
};

/** Heat kernel signature.
 *
 *  HKS is a intrinsic, multiscale, local shape descriptor.
 *
 *  **Reference**
 *
 *  Sun J., Ovsjanikov M., Guibas L..
 *  A concise and provably informative multi-scale signature based on heat
 *  diffusion.
 *  Proceedings of the Symposium on Geometry Processing, 2009.
 */
template<typename Mesh>
class HKS
{
public:
    using VPMap =
        typename boost::property_map<Mesh, boost::vertex_point_t>::type;
    using Point_3 = typename boost::property_traits<VPMap>::value_type;
    using Kernel = typename CGAL::Kernel_traits<Point_3>::Kernel;
    using FT = typename Kernel::FT;
    using Vertex = typename boost::graph_traits<Mesh>::vertex_descriptor;
    using Vec = Eigen::Matrix<FT, Eigen::Dynamic, 1>;
    using Mat = Eigen::Matrix<FT, Eigen::Dynamic, Eigen::Dynamic>;

public:
    /** Build up the necessary computational components.
     *
     *  Compute eigen decomposition of the mesh Laplacian. Note that the result
     *  number of eigenstructures might be smaller than what is requested in the
     *  because of numerical issues and some may not converge.
     *
     *  @param mesh The target mesh.
     *  @param k Number of eigenvalues/eigenvectors to use.
     */
    void build(const Mesh& mesh, unsigned k = 300);

    /** Build up the necessary computational components.
     *
     *  From precomputed eigen decomposition.
     *
     *  @param mesh The target mesh.
     *  @param eigenvalues Precomputed eigenvalues.
     *  @param eigenfunctions Precomputed eigenfunctions.
     */
    void build(const Mesh& mesh,
               const Vec* eigenvalues,
               const Mat* eigenfunctions);

    /** Compute hks for all vertices.
     *
     *  @param hks Output heat kernel signatures
     *  @param tscales Number of time scales to use.
     *  @param tmin The minimum time value, default to -1 which will use the
     *  parameter setting described in the paper.
     *  @param tmax The maximum time value, default to -1 which will use the
     *  parameter setting described in the paper.
     */
    template<typename Derived>
    void compute(Eigen::ArrayBase<Derived>& hks,
                 unsigned tscales = 100,
                 float tmin = -1.0f,
                 float tmax = -1.0f);

public:
    /** The mesh being processed.
     *
     */
    const Mesh* mesh;

    /** The eigenvalues.
     *
     */
    ProPtr<const Vec> eigenvalues;

    /** The eigenfunctions.
     *
     */
    ProPtr<const Mat> eigenfunctions;
};

/** @}*/
} // namespace Euclid

#include "src/SpinImage.cpp"
#include "src/HKS.cpp"
